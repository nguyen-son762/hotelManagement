//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HotelManagement
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HotelManagementEntity : DbContext
    {
        public HotelManagementEntity()
            : base("name=HotelManagementEntity")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Admin> Admins { get; set; }
        public virtual DbSet<Bill> Bills { get; set; }
        public virtual DbSet<Booking> Bookings { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<Room> Rooms { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<Staff> Staffs { get; set; }
    
        public virtual int updateBill(Nullable<int> billid, Nullable<int> roomId, Nullable<int> customerId, Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate)
        {
            var billidParameter = billid.HasValue ?
                new ObjectParameter("billid", billid) :
                new ObjectParameter("billid", typeof(int));
    
            var roomIdParameter = roomId.HasValue ?
                new ObjectParameter("roomId", roomId) :
                new ObjectParameter("roomId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("customerId", customerId) :
                new ObjectParameter("customerId", typeof(int));
    
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateBill", billidParameter, roomIdParameter, customerIdParameter, beginDateParameter, endDateParameter);
        }
    
        public virtual int updateItemFromService(Nullable<int> serviceId, Nullable<int> quantity)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("serviceId", serviceId) :
                new ObjectParameter("serviceId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateItemFromService", serviceIdParameter, quantityParameter);
        }
    }
}
